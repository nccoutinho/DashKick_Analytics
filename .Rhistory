# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
final_standings <- predict_final_standings(match_outcomes, teams)
print(final_standings)
predict_final_standings <- function(predictions, teams) {
# Aggregate predicted goal differences for each team
team_predictions <- data.frame(Team = teams, PredictedGoalDiff = rep(0, length(teams)))
for (team in teams) {
home_goals <- predictions$GoalDiff[predictions$HomeTeam == team]
away_goals <- predictions$GoalDiff[predictions$AwayTeam == team]
team_predictions[team_predictions$Team == team, "PredictedGoalDiff"] <-
sum(ifelse(!is.na(home_goals), home_goals, 0) + ifelse(!is.na(away_goals), away_goals, 0))
}
# Rank teams based on predicted goal differences
final_standings <- team_predictions[order(-team_predictions$PredictedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
# Use actual outcomes for matches played to date
actual_outcomes <- match_outcomes[!is.na(match_outcomes$ActualOutcome), ]
final_standings_actual <- predict_final_standings(actual_outcomes, teams)
# Use predicted outcomes for the rest
predicted_outcomes <- match_outcomes[is.na(match_outcomes$ActualOutcome), ]
final_standings_predicted <- predict_final_standings(predicted_outcomes, teams)
# Combine actual and predicted standings
final_standings <- rbind(final_standings_actual, final_standings_predicted)
print(final_standings)
predict_final_standings <- function(predictions, teams) {
# Aggregate predicted goal differences for each team
team_predictions <- data.frame(Team = teams, PredictedGoalDiff = rep(0, length(teams)))
for (team in teams) {
home_goals <- predictions$GoalDiff[predictions$HomeTeam == team]
away_goals <- predictions$GoalDiff[predictions$AwayTeam == team]
team_predictions[team_predictions$Team == team, "PredictedGoalDiff"] <-
sum(ifelse(!is.na(home_goals), home_goals, 0) + ifelse(!is.na(away_goals), away_goals, 0))
}
# Rank teams based on predicted goal differences
final_standings <- team_predictions[order(-team_predictions$PredictedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
library(dplyr)
library(caret)
library(nnet)
library(randomForest)
library(Metrics)
setwd("/Users/nats/DashKick_Analytics")
# Load your dataset
predict_win <- function() {
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data <- soccer_data %>%
filter(Status == "FT")
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
tail(soccer_data)
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > threshold, "Win",
ifelse(predictions_lm < threshold, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
return(test_data)
}
match_outcomes <- predict_win()
predict_final_standings <- function(predictions, teams) {
# Aggregate predicted goal differences for each team
team_predictions <- data.frame(Team = teams, PredictedGoalDiff = rep(0, length(teams)))
for (team in teams) {
home_goals <- predictions$GoalDiff[predictions$HomeTeam == team]
away_goals <- predictions$GoalDiff[predictions$AwayTeam == team]
team_predictions[team_predictions$Team == team, "PredictedGoalDiff"] <-
sum(ifelse(!is.na(home_goals), home_goals, 0) + ifelse(!is.na(away_goals), away_goals, 0))
}
# Rank teams based on predicted goal differences
final_standings <- team_predictions[order(-team_predictions$PredictedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
# Use actual outcomes for matches played to date
actual_outcomes <- match_outcomes[!is.na(match_outcomes$ActualOutcome), ]
final_standings_actual <- predict_final_standings(actual_outcomes, teams)
# Use predicted outcomes for the rest
predicted_outcomes <- match_outcomes[is.na(match_outcomes$ActualOutcome), ]
final_standings_predicted <- predict_final_standings(predicted_outcomes, teams)
# Combine actual and predicted standings
final_standings <- rbind(final_standings_actual, final_standings_predicted)
print(final_standings)
predict_final_standings <- function(predictions, actual_outcomes, teams) {
# Combine actual and predicted outcomes
combined_outcomes <- rbind(actual_outcomes, predictions)
# Aggregate combined goal differences for each team
team_predictions <- data.frame(Team = teams, CombinedGoalDiff = rep(0, length(teams)))
for (team in teams) {
combined_goals <- combined_outcomes$GoalDiff[combined_outcomes$HomeTeam == team] +
combined_outcomes$GoalDiff[combined_outcomes$AwayTeam == team]
team_predictions[team_predictions$Team == team, "CombinedGoalDiff"] <-
sum(ifelse(!is.na(combined_goals), combined_goals, 0))
}
# Rank teams based on combined goal differences
final_standings <- team_predictions[order(-team_predictions$CombinedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
# Use actual outcomes for matches played to date
actual_outcomes <- match_outcomes[!is.na(match_outcomes$ActualOutcome), ]
final_standings_actual <- predict_final_standings(match_outcomes, actual_outcomes, teams)
# Use predicted outcomes for the rest
predicted_outcomes <- match_outcomes[is.na(match_outcomes$ActualOutcome), ]
final_standings_predicted <- predict_final_standings(predicted_outcomes, actual_outcomes, teams)
# Combine actual and predicted standings
final_standings <- rbind(final_standings_actual, final_standings_predicted)
print(final_standings)
predict_final_standings <- function(predictions, teams) {
# Separate actual outcomes for matches played to date and predicted outcomes for matches not played
actual_outcomes <- predictions[!is.na(predictions$ActualOutcome), ]
predicted_outcomes <- predictions[is.na(predictions$ActualOutcome), ]
# Aggregate actual goal differences for matches played to date
team_actual <- data.frame(Team = teams, ActualGoalDiff = rep(0, length(teams)))
for (team in teams) {
actual_goals <- actual_outcomes$GoalDiff[actual_outcomes$HomeTeam == team] +
actual_outcomes$GoalDiff[actual_outcomes$AwayTeam == team]
team_actual[team_actual$Team == team, "ActualGoalDiff"] <-
sum(ifelse(!is.na(actual_goals), actual_goals, 0))
}
# Aggregate predicted goal differences for matches not played
team_predicted <- data.frame(Team = teams, PredictedGoalDiff = rep(0, length(teams)))
for (team in teams) {
predicted_goals <- predicted_outcomes$GoalDiff[predicted_outcomes$HomeTeam == team] +
predicted_outcomes$GoalDiff[predicted_outcomes$AwayTeam == team]
team_predicted[team_predicted$Team == team, "PredictedGoalDiff"] <-
sum(ifelse(!is.na(predicted_goals), predicted_goals, 0))
}
# Combine actual and predicted standings
final_standings <- data.frame(Team = teams,
CombinedGoalDiff = team_actual$ActualGoalDiff + team_predicted$PredictedGoalDiff)
# Rank teams based on combined goal differences
final_standings <- final_standings[order(-final_standings$CombinedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
teams <- unique(c(match_outcomes$HomeTeam, match_outcomes$AwayTeam))
# Use actual outcomes for matches played to date
final_standings_actual <- predict_final_standings(match_outcomes, teams)
print(final_standings_actual)
print(final_standings_actual)
team_actual
match_outcomes
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data <- soccer_data %>%
filter(Status == "FT")
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
tail(soccer_data)
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > 1, "Win",
ifelse(predictions_lm < -1, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data <- soccer_data %>%
filter(Status == "FT")
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
tail(soccer_data)
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > 1, "Win",
ifelse(predictions_lm < 1, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data <- soccer_data %>%
filter(Status == "FT")
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
tail(soccer_data)
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > 1, "Win",
ifelse(predictions_lm < 0, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
next_data <- soccer_data %>%
filter(Status != "FT")
next_data
next_data <- soccer_data %>%
filter(Status <> "FT")
next_data <- soccer_data %>%
filter(Status == "FT")
next_data
next_data <- soccer_data %>%
filter(Status != "FT")
next_data
tail(soccer_data$Status)
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
tail(soccer_data)
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
soccer_data <- soccer_data %>%
filter(Status == "FT")
next_data <- soccer_data  %>%
filter(Status != "FT")
soccer_data
next_data
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
next_data <- soccer_data  %>%
filter(Status != "FT")
soccer_data <- soccer_data %>%
filter(Status == "FT")
next_data
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > threshold, "Win",
ifelse(predictions_lm < threshold, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
predictions_next <- predict(lm_model, newdata = next_data)
predictions_lm <- round(predictions_next)
predictions_lm
predictions_next <- round(predictions_next)
next_data$GoalDiff <- predictions_next
next_data
match_result <- rbind(soccer_data, next_data)
match_result
predict_win <- function() {
soccer_data <- read.csv("match_data.csv")
soccer_data$GoalDiff <- soccer_data$FT_ScoreHome - soccer_data$FT_scoreAway
soccer_data$Stadium <- as.factor(soccer_data$Stadium)
soccer_data$HomeTeam <- as.factor(soccer_data$HomeTeam)
soccer_data$AwayTeam <- as.factor(soccer_data$AwayTeam)
soccer_data$Referee <- as.factor(soccer_data$Referee)
soccer_data$Time <- as.POSIXct(soccer_data$Time, format = "%H:%M:%S")
next_data <- soccer_data  %>%
filter(Status != "FT")
soccer_data <- soccer_data %>%
filter(Status == "FT")
model_data <- soccer_data %>%
select(HomeTeam, AwayTeam, Stadium, Time, GoalDiff)
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_data$GoalDiff, p = 0.8, list = FALSE)
train_data <- model_data[split_index, ]
test_data <- model_data[-split_index, ]
lm_model <- lm(GoalDiff ~ ., data = train_data)
predictions_lm <- predict(lm_model, newdata = test_data)
predictions_lm <- round(predictions_lm)
threshold <- 0
test_data$Outcome <- ifelse(predictions_lm > threshold, "Win",
ifelse(predictions_lm < threshold, "Loss", "Draw"))
test_data$ActualOutcome <- ifelse(test_data$GoalDiff > threshold, "Win",
ifelse(test_data$GoalDiff < threshold, "Loss", "Draw"))
correct_predictions <- test_data$Outcome == test_data$ActualOutcome
accuracy <- mean(correct_predictions)
precision <- accuracy(predictions_lm, test_data$GoalDiff)
recall <- recall(predictions_lm, test_data$GoalDiff)
mse_lm <- mean((predictions_lm - test_data$GoalDiff)^2)
rmse_lm <- sqrt(mse_lm)
mae_lm <- mean(abs(predictions_lm - test_data$GoalDiff))
cat("\nAccuracy:", accuracy)
cat("\nPrecision:", precision)
cat("\nRecall:", recall, "\n")
cat("Regression Metrics for Linear Regression model:\n")
cat("Mean Squared Error (MSE):", mse_lm, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_lm, "\n")
cat("Mean Absolute Error (MAE):", mae_lm, "\n")
predictions_next <- predict(lm_model, newdata = next_data)
predictions_next <- round(predictions_next)
next_data$GoalDiff <- predictions_next
match_result <- rbind(soccer_data, next_data)
return(match_result)
}
match_outcomes <- predict_win()
predict_final_standings <- function(match_outcomes) {
# Separate actual outcomes for matches played to date and predicted outcomes for matches not played
actual_outcomes <- match_outcomes[!is.na(match_outcomes$ActualOutcome), ]
predicted_outcomes <- match_outcomes[is.na(match_outcomes$ActualOutcome), ]
# Aggregate actual goal differences for matches played to date
team_actual <- data.frame(Team = unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam)),
ActualGoalDiff = rep(0, length(unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam)))))
for (team in team_actual$Team) {
actual_goals <- actual_outcomes$GoalDiff[actual_outcomes$HomeTeam == team] +
actual_outcomes$GoalDiff[actual_outcomes$AwayTeam == team]
team_actual[team_actual$Team == team, "ActualGoalDiff"] <- sum(ifelse(!is.na(actual_goals), actual_goals, 0))
}
# Aggregate predicted goal differences for matches not played
team_predicted <- data.frame(Team = unique(c(predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)),
PredictedGoalDiff = rep(0, length(unique(c(predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)))))
for (team in team_predicted$Team) {
predicted_goals <- predicted_outcomes$GoalDiff[predicted_outcomes$HomeTeam == team] +
predicted_outcomes$GoalDiff[predicted_outcomes$AwayTeam == team]
team_predicted[team_predicted$Team == team, "PredictedGoalDiff"] <- sum(ifelse(!is.na(predicted_goals), predicted_goals, 0))
}
# Combine actual and predicted standings
final_standings <- data.frame(Team = unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam,
predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)),
CombinedGoalDiff = team_actual$ActualGoalDiff + team_predicted$PredictedGoalDiff)
# Rank teams based on combined goal differences
final_standings <- final_standings[order(-final_standings$CombinedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
final_standings <- predict_final_standings(match_outcomes)
print(final_standings)
predict_final_standings <- function(match_outcomes) {
# Separate actual outcomes for matches played to date and predicted outcomes for matches not played
actual_outcomes <- match_outcomes[!is.na(match_outcomes$ActualOutcome), ]
predicted_outcomes <- match_outcomes[is.na(match_outcomes$ActualOutcome), ]
cat("Actual Outcomes:\n")
print(actual_outcomes)
cat("Predicted Outcomes:\n")
print(predicted_outcomes)
# Aggregate actual goal differences for matches played to date
team_actual <- data.frame(Team = unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam)),
ActualGoalDiff = rep(0, length(unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam)))))
for (team in team_actual$Team) {
actual_goals <- actual_outcomes$GoalDiff[actual_outcomes$HomeTeam == team] +
actual_outcomes$GoalDiff[actual_outcomes$AwayTeam == team]
team_actual[team_actual$Team == team, "ActualGoalDiff"] <- sum(ifelse(!is.na(actual_goals), actual_goals, 0))
}
cat("Team Actual:\n")
print(team_actual)
# Aggregate predicted goal differences for matches not played
team_predicted <- data.frame(Team = unique(c(predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)),
PredictedGoalDiff = rep(0, length(unique(c(predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)))))
for (team in team_predicted$Team) {
predicted_goals <- predicted_outcomes$GoalDiff[predicted_outcomes$HomeTeam == team] +
predicted_outcomes$GoalDiff[predicted_outcomes$AwayTeam == team]
team_predicted[team_predicted$Team == team, "PredictedGoalDiff"] <- sum(ifelse(!is.na(predicted_goals), predicted_goals, 0))
}
cat("Team Predicted:\n")
print(team_predicted)
# Combine actual and predicted standings
final_standings <- data.frame(Team = unique(c(actual_outcomes$HomeTeam, actual_outcomes$AwayTeam,
predicted_outcomes$HomeTeam, predicted_outcomes$AwayTeam)),
CombinedGoalDiff = team_actual$ActualGoalDiff + team_predicted$PredictedGoalDiff)
cat("Final Standings:\n")
print(final_standings)
# Rank teams based on combined goal differences
final_standings <- final_standings[order(-final_standings$CombinedGoalDiff), ]
final_standings$Position <- seq_along(final_standings$Team)
return(final_standings)
}
# Assuming 'match_outcomes' contains the test data with predicted outcomes
final_standings <- predict_final_standings(match_outcomes)
print(final_standings)
match_outcomes
tail(match_outcomes)
predict_stand <- function(match_result) {
standings <- match_result %>%
group_by(Team = HomeTeam) %>%
summarize(
Points = sum(case_when(
GoalDiff > 0 ~ 3,
GoalDiff == 0 ~ 1,
TRUE ~ 0
)),
GoalDifference = sum(GoalDiff)
) %>%
arrange(desc(Points), desc(GoalDifference)) %>%
mutate(Position = row_number())
return (standings)
}
final_stand <- predict_stand(match_outcomes)
final_stand
